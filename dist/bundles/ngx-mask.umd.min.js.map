{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","ar","error","Separators","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","validation","specialCharacters","patterns","0","pattern","RegExp","9","optional","X","symbol","A","S","M","H","h","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","separator","str","char","decimalChar","precision","x","split","decimals","res","rgx","test","replace","substr","currencySeparator","indFormat","baseNum","lastThree","substring","otherNumbers","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","decimalMarker","precisionRegEx","precisionMatch","match","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","result","multi","backspaceShift","shift","stepBack","slice","inputArray","toString","ipError","filter","startsWith","_checkInput","indexOf","base","SEPARATOR","DOT_SEPARATOR","COMMA_SEPARATOR","IND_COMMA_SEPARATED","INT_APOSTROPHE_SEPARATED","INT_COMMA_SEPARATED","INT_SPACE_SEPARATED","strForSep","includes","lastIndexOf","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_findSpecialChar","newPosition","has","actualShift","find","val","maskSymbol","join","Inject","args","Injectable","tslib_1.__param","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","selStart","selEnd","onChange","_formElement","nativeElement","__","constructor","create","tslib_1.__extends","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","applyValueChanges","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","formElementProperty","_b","name","setProperty","checkSpecialCharAmount","arr","isArray","_removeMask","_removeSuffix","_removePrefix","_checkSymbols","specialCharactersForRemove","_regExpForRemove","separatorValue","testFn","_checkPrecision","baseSeparator","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","onTouch","ngOnChanges","changes","_maskValue","currentValue","_applyMask","validate","Mask error","counterOfOpt","this_1","opt","length_1","onInput","el","_inputValue","selectionStart","caretShift","_backspaceShift","positionToApply","_code","setSelectionRange","onBlur","onFocus","selectionEnd","keyCode","focus","nextValue","a","code","preventDefault","specialChars","cursorStart","readOnly","writeValue","_arguments","generator","String","P","Promise","resolve","reject","fulfilled","rejected","then","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","tslib_1.__decorate","Input","HostListener","MaskDirective_1","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","NgxMaskModule_1","useValue","useFactory","_configFactory","deps","forChild","_configValue","NgModule","exports","declarations","initConfig","Function"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\n\r\nexport enum Separators {\r\n  SEPARATOR = 'separator',\r\n  COMMA_SEPARATOR = 'comma_separator',\r\n  DOT_SEPARATOR = 'dot_separator',\r\n  IND_COMMA_SEPARATED = 'ind_comma_separated',\r\n  INT_COMMA_SEPARATED = 'int_comma_separated',\r\n  INT_SPACE_SEPARATED = 'int_space_separated',\r\n  INT_APOSTROPHE_SEPARATED = 'int_apostrophe_separated'\r\n}\r\n\r\n@Injectable()\r\nexport class MaskApplierService {\r\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\r\n  public hiddenInput: IConfig['hiddenInput'];\r\n  public showTemplate!: IConfig['showTemplate'];\r\n  public clearIfNotMatch!: IConfig['clearIfNotMatch'];\r\n  public maskExpression: string = '';\r\n  public actualValue: string = '';\r\n  public shownMaskExpression: string = '';\r\n  public maskSpecialCharacters!: IConfig['specialCharacters'];\r\n  public maskAvailablePatterns!: IConfig['patterns'];\r\n  public prefix!: IConfig['prefix'];\r\n  public suffix!: IConfig['suffix'];\r\n  public customPattern!: IConfig['patterns'];\r\n  public ipError?: boolean;\r\n  public showMaskTyped!: IConfig['showMaskTyped'];\r\n  public validation: IConfig['validation'];\r\n\r\n  private _shift!: Set<number>;\r\n\r\n  public constructor(@Inject(config) protected _config: IConfig) {\r\n    this._shift = new Set();\r\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.prefix = this._config.prefix;\r\n    this.suffix = this._config.suffix;\r\n    this.hiddenInput = this._config.hiddenInput;\r\n    this.showMaskTyped = this._config.showMaskTyped;\r\n    this.validation = this._config.validation;\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\r\n    const [mask, customPattern] = maskAndPattern;\r\n    this.customPattern = customPattern;\r\n    return this.applyMask(inputValue, mask);\r\n  }\r\n\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {\r\n    },\r\n  ): string {\r\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\r\n      return '';\r\n    }\r\n    let cursor: number = 0;\r\n    let result: string = ``;\r\n    let multi: boolean = false;\r\n    let backspaceShift: boolean = false;\r\n    let shift: number = 1;\r\n    let stepBack: boolean = false;\r\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\r\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\r\n    }\r\n    const inputArray: string[] = inputValue.toString().split('');\r\n    if (maskExpression === 'IP') {\r\n      this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\r\n      maskExpression = '099.099.099.099';\r\n    }\r\n    if (maskExpression.startsWith('percent')) {\r\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\r\n        inputValue = this._checkInput(inputValue);\r\n        const precision: number = this.getPrecision(maskExpression);\r\n        inputValue = this.checkInputPrecision(inputValue, precision, '.');\r\n      }\r\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\r\n        const base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\r\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\r\n      }\r\n      if (this.percentage(inputValue)) {\r\n        result = inputValue;\r\n      } else {\r\n        result = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n    } else if (\r\n      maskExpression.startsWith(Separators.SEPARATOR) ||\r\n      maskExpression.startsWith(Separators.DOT_SEPARATOR) ||\r\n      maskExpression.startsWith(Separators.COMMA_SEPARATOR) ||\r\n      maskExpression.startsWith(Separators.IND_COMMA_SEPARATED) ||\r\n      maskExpression.startsWith(Separators.INT_APOSTROPHE_SEPARATED) ||\r\n      maskExpression.startsWith(Separators.INT_COMMA_SEPARATED) ||\r\n      maskExpression.startsWith(Separators.INT_SPACE_SEPARATED)\r\n    ) {\r\n      if (\r\n        inputValue.match('[wÐ°-ÑÐ-Ð¯]') ||\r\n        inputValue.match('[ÐÑÐ-Ñ]') ||\r\n        inputValue.match('[a-z]|[A-Z]') ||\r\n        inputValue.match(/[-@#!$%\\\\^&*()_Â£Â¬'+|~=`{}\\[\\]:\";<>.?\\/]/)\r\n      ) {\r\n        inputValue = this._checkInput(inputValue);\r\n      }\r\n      const precision: number = this.getPrecision(maskExpression);\r\n      let strForSep: string;\r\n      if (maskExpression.startsWith(Separators.SEPARATOR)) {\r\n        if (\r\n          inputValue.includes(',') &&\r\n          inputValue.endsWith(',') &&\r\n          inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\r\n        ) {\r\n          inputValue = inputValue.substring(0, inputValue.length - 1);\r\n        }\r\n        inputValue = inputValue.replace('.', ' ');\r\n      }\r\n      if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\r\n        if (\r\n          inputValue.indexOf('.') !== -1 &&\r\n          inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\r\n          (inputValue.indexOf('.') > 3 || inputValue.length < 6)\r\n        ) {\r\n          inputValue = inputValue.replace('.', ',');\r\n        }\r\n        inputValue =\r\n          inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\r\n            ? inputValue.slice(1, inputValue.length)\r\n            : inputValue;\r\n      }\r\n      if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\r\n        inputValue =\r\n          inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\r\n            ? inputValue.slice(1, inputValue.length)\r\n            : inputValue;\r\n      }\r\n      if (maskExpression.startsWith(Separators.SEPARATOR)) {\r\n        if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\r\n          inputValue = inputValue.substring(0, inputValue.length - 1);\r\n        }\r\n        inputValue = this.checkInputPrecision(inputValue, precision, ',');\r\n        strForSep = inputValue.replace(/\\s/g, '');\r\n        result = this.separator(strForSep, ' ', ',', precision);\r\n      } else if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\r\n        if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\r\n          inputValue = inputValue.substring(0, inputValue.length - 1);\r\n        }\r\n        inputValue = this.checkInputPrecision(inputValue, precision, ',');\r\n        strForSep = inputValue.replace(/\\./g, '');\r\n        result = this.separator(strForSep, '.', ',', precision);\r\n      } else if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\r\n        strForSep = inputValue.replace(/,/g, '');\r\n        result = this.separator(strForSep, ',', '.', precision);\r\n      } else if (maskExpression.startsWith(Separators.IND_COMMA_SEPARATED)) {\r\n        strForSep = inputValue.replace(/,/g, '');\r\n        result = this.currencySeparator(strForSep, ',', '.', precision, true);\r\n      } else if (maskExpression.startsWith(Separators.INT_SPACE_SEPARATED)) {\r\n        strForSep = inputValue.replace(/[ ,']/g, '');\r\n        result = this.currencySeparator(strForSep, ' ', '.', precision);\r\n      } else if (maskExpression.startsWith(Separators.INT_COMMA_SEPARATED)) {\r\n        strForSep = inputValue.replace(/,/g, '');\r\n        result = this.currencySeparator(strForSep, ',', '.', precision);\r\n      } else if (maskExpression.startsWith(Separators.INT_APOSTROPHE_SEPARATED)) {\r\n        strForSep = inputValue.replace(/[ ,']/g, '');\r\n        result = this.currencySeparator(strForSep, '\\'', '.', precision);\r\n      }\r\n\r\n      const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\r\n      const shiftStep: number = result.length - inputValue.length;\r\n\r\n      // position shifting issue fixed for custom separators\r\n      if (!(maskExpression.startsWith(Separators.IND_COMMA_SEPARATED) ||\r\n        maskExpression.startsWith(Separators.INT_APOSTROPHE_SEPARATED) ||\r\n        maskExpression.startsWith(Separators.INT_COMMA_SEPARATED) ||\r\n        maskExpression.startsWith(Separators.INT_SPACE_SEPARATED))) {\r\n        if (shiftStep > 0 && result[position] !== ',') {\r\n          backspaceShift = true;\r\n          let _shift: number = 0;\r\n          do {\r\n            this._shift.add(position + _shift);\r\n            _shift++;\r\n          } while (_shift < shiftStep);\r\n        } else if (\r\n          (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\r\n          (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\r\n        ) {\r\n          this._shift.clear();\r\n          backspaceShift = true;\r\n          shift = shiftStep;\r\n          position += shiftStep;\r\n          this._shift.add(position);\r\n        } else {\r\n          this._shift.clear();\r\n        }\r\n      }\r\n\r\n    } else {\r\n      for (\r\n        // tslint:disable-next-line\r\n        let i: number = 0, inputSymbol: string = inputArray[0];\r\n        i < inputArray.length;\r\n        i++, inputSymbol = inputArray[i]\r\n      ) {\r\n        if (cursor === maskExpression.length) {\r\n          break;\r\n        }\r\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\r\n          result += inputSymbol;\r\n          cursor += 2;\r\n        } else if (\r\n          maskExpression[cursor + 1] === '*' &&\r\n          multi &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n          multi = false;\r\n        } else if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n          maskExpression[cursor + 1] === '*'\r\n        ) {\r\n          result += inputSymbol;\r\n          multi = true;\r\n        } else if (\r\n          maskExpression[cursor + 1] === '?' &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n        } else if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\r\n          (this.hiddenInput &&\r\n            this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n            this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\r\n        ) {\r\n          if (maskExpression[cursor] === 'H') {\r\n            if (Number(inputSymbol) > 2) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 'h') {\r\n            if (result === '2' && Number(inputSymbol) > 3) {\r\n              cursor += 1;\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 'm') {\r\n            if (Number(inputSymbol) > 5) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 's') {\r\n            if (Number(inputSymbol) > 5) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor - 1] === 'd') {\r\n            if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31 || inputValue[cursor] === '/') {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 'M') {\r\n            if (\r\n              (inputValue[cursor - 1] === '/' &&\r\n                (Number(inputValue.slice(cursor, cursor + 2)) > 12 ||\r\n                  inputValue[cursor + 1] === '/')) ||\r\n              (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12 ||\r\n                Number(inputValue.slice(0, 2)) > 31 ||\r\n                (Number(inputValue[cursor - 1]) > 1 && inputValue[cursor - 2] === '/'))\r\n            ) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          result += inputSymbol;\r\n          cursor++;\r\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\r\n          result += maskExpression[cursor];\r\n          cursor++;\r\n          const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n            ? inputArray.length\r\n            : cursor;\r\n          this._shift.add(shiftStep + this.prefix.length || 0);\r\n          i--;\r\n        } else if (\r\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\r\n        ) {\r\n          cursor++;\r\n          i--;\r\n        } else if (\r\n          this.maskExpression[cursor + 1] === '*' &&\r\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\r\n          multi\r\n        ) {\r\n          cursor += 3;\r\n          result += inputSymbol;\r\n        } else if (\r\n          this.maskExpression[cursor + 1] === '?' &&\r\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\r\n          multi\r\n        ) {\r\n          cursor += 3;\r\n          result += inputSymbol;\r\n        } else if (\r\n          this.showMaskTyped &&\r\n          this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\r\n          inputSymbol !== '_'\r\n        ) {\r\n          stepBack = true;\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      result.length + 1 === maskExpression.length &&\r\n      this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\r\n    ) {\r\n      result += maskExpression[maskExpression.length - 1];\r\n    }\r\n\r\n    let newPosition: number = position + 1;\r\n\r\n    while (this._shift.has(newPosition)) {\r\n      shift++;\r\n      newPosition++;\r\n    }\r\n\r\n    let actualShift: number = this._shift.has(position) ? shift : 0;\r\n    if (stepBack) {\r\n      actualShift--;\r\n    }\r\n\r\n    cb(actualShift, backspaceShift);\r\n    if (shift < 0) {\r\n      this._shift.clear();\r\n    }\r\n    let res: string = this.suffix ? `${this.prefix}${result}${this.suffix}` : `${this.prefix}${result}`;\r\n    if (result.length === 0) {\r\n      res = `${this.prefix}${result}`;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  public _findSpecialChar(inputSymbol: string): undefined | string {\r\n    return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\r\n  }\r\n\r\n  protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\r\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\r\n    return (\r\n      this.maskAvailablePatterns[maskSymbol] &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\r\n    );\r\n  }\r\n\r\n  private separator = (str: string, char: string, decimalChar: string, precision: number) => {\r\n    str += '';\r\n    const x: string[] = str.split(decimalChar);\r\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, '$1' + char + '$2');\r\n    }\r\n    if (precision === undefined) {\r\n      return res + decimals;\r\n    } else if (precision === 0) {\r\n      return res;\r\n    }\r\n    return res + decimals.substr(0, precision + 1);\r\n  };\r\n\r\n  private currencySeparator = (str: string, char: string, decimalChar: string, precision: number,\r\n                               indFormat: boolean = false) => {\r\n    str += '';\r\n    const x: string[] = str.split(decimalChar);\r\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\r\n    const baseNum: string = x[0];\r\n    let lastThree: string = baseNum.substring(baseNum.length - 3);\r\n    const otherNumbers: string = baseNum.substring(0, baseNum.length - 3);\r\n    if (otherNumbers !== '') {\r\n      lastThree = char + lastThree;\r\n    }\r\n    const res: string = (indFormat ? otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, char) :\r\n      otherNumbers.replace(/\\B(?=(\\d{3})+(?!\\d))/g, char)) + lastThree;\r\n    if (precision === undefined) {\r\n      return res + decimals;\r\n    } else if (precision === 0) {\r\n      return res;\r\n    }\r\n    return res + decimals.substr(0, precision + 1);\r\n  };\r\n\r\n  private percentage = (str: string): boolean => {\r\n    return Number(str) >= 0 && Number(str) <= 100;\r\n  };\r\n\r\n  private getPrecision = (maskExpression: string): number => {\r\n    const x: string[] = maskExpression.split('.');\r\n    if (x.length > 1) {\r\n      return Number(x[x.length - 1]);\r\n    }\r\n    return Infinity;\r\n  };\r\n\r\n  private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\r\n    if (precision < Infinity) {\r\n      let precisionRegEx: RegExp;\r\n\r\n      if (decimalMarker === '.') {\r\n        precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\r\n      } else {\r\n        precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\r\n      }\r\n\r\n      const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\r\n      if (precisionMatch && precisionMatch[0].length - 1 > precision) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n    }\r\n    return inputValue;\r\n  };\r\n\r\n  private _checkInput(str: string): string {\r\n    return str\r\n      .split('')\r\n      .filter((i: string) => i.match('\\\\d') || i === '.' || i === ',')\r\n      .join('');\r\n  }\r\n\r\n  // tslint:disable-next-line: max-file-line-count\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface IConfig {\r\n    suffix: string;\r\n    prefix: string;\r\n    clearIfNotMatch: boolean;\r\n    showTemplate: boolean;\r\n    showMaskTyped: boolean;\r\n    shownMaskExpression: string;\r\n    dropSpecialCharacters: boolean | string[];\r\n    specialCharacters: string[];\r\n    hiddenInput: boolean | undefined;\r\n    validation: boolean;\r\n    patterns: {\r\n        [character: string]: {\r\n            pattern: RegExp;\r\n            optional?: boolean;\r\n            symbol?: string;\r\n        };\r\n    };\r\n}\r\n\r\nexport type optionsConfig = Partial<IConfig>;\r\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\r\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\r\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\r\n\r\nexport const initialConfig: IConfig = {\r\n    suffix: '',\r\n    prefix: '',\r\n    clearIfNotMatch: false,\r\n    showTemplate: false,\r\n    showMaskTyped: false,\r\n    dropSpecialCharacters: true,\r\n    hiddenInput: undefined,\r\n    shownMaskExpression: '',\r\n    validation: true,\r\n    // tslint:disable-next-line: quotemark\r\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\r\n    patterns: {\r\n        '0': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        '9': {\r\n            pattern: new RegExp('\\\\d'),\r\n            optional: true,\r\n        },\r\n        X: {\r\n            pattern: new RegExp('\\\\d'),\r\n            symbol: '*',\r\n        },\r\n        A: {\r\n            pattern: new RegExp('[a-zA-Z0-9]'),\r\n        },\r\n        S: {\r\n            pattern: new RegExp('[a-zA-Z]'),\r\n        },\r\n        d: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        m: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        M: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        H: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        h: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        s: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n    },\r\n};\r\n\r\nexport const withoutValidation: string[] = [\r\n    'percent',\r\n    'Hh:m0:s0',\r\n    'Hh:m0',\r\n    'Hh',\r\n    'm0:s0',\r\n    's0',\r\n    'm0',\r\n    'separator',\r\n    'dot_separator',\r\n    'comma_separator',\r\n    'd0/M0/0000',\r\n    'd0/M0',\r\n    'd0',\r\n    'M0',\r\n];\r\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { MaskApplierService, Separators } from './mask-applier.service';\r\n\r\n@Injectable()\r\nexport class MaskService extends MaskApplierService {\r\n    public validation: boolean = true;\r\n    public maskExpression: string = '';\r\n    public isNumberValue: boolean = false;\r\n    public showMaskTyped: boolean = false;\r\n    public maskIsShown: string = '';\r\n    public selStart: number | null = null;\r\n    public selEnd: number | null = null;\r\n    protected _formElement: HTMLInputElement;\r\n    // tslint:disable-next-line\r\n    public onChange = (_: any) => {};\r\n\r\n    public constructor(\r\n        // tslint:disable-next-line\r\n        @Inject(DOCUMENT) private document: any,\r\n        @Inject(config) protected _config: IConfig,\r\n        private _elementRef: ElementRef,\r\n        private _renderer: Renderer2\r\n    ) {\r\n        super(_config);\r\n        this._formElement = this._elementRef.nativeElement;\r\n    }\r\n\r\n    // tslint:disable-next-line:cyclomatic-complexity\r\n    public applyMask(\r\n        inputValue: string,\r\n        maskExpression: string,\r\n        position: number = 0,\r\n        cb: Function = () => {}\r\n    ): string {\r\n        if (!maskExpression) {\r\n            return inputValue;\r\n        }\r\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\r\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\r\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\r\n        }\r\n        if (!inputValue && this.showMaskTyped) {\r\n            this.formControlResult(this.prefix);\r\n            return this.prefix + this.maskIsShown;\r\n        }\r\n        const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\r\n        let newInputValue: string = '';\r\n        if (this.hiddenInput !== undefined) {\r\n            let actualResult: string[] = this.actualValue.split('');\r\n            inputValue !== '' && actualResult.length\r\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\r\n                    ? inputValue.length > actualResult.length\r\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\r\n                        : inputValue.length < actualResult.length\r\n                        ? actualResult.length - inputValue.length === 1\r\n                            ? actualResult.splice(this.selStart - 1, 1)\r\n                            : actualResult.splice(this.selStart, this.selEnd - this.selStart)\r\n                        : null\r\n                    : null\r\n                : (actualResult = []);\r\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\r\n        }\r\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\r\n        const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\r\n        this.actualValue = this.getActualValue(result);\r\n\r\n        if (\r\n            (this.maskExpression.startsWith(Separators.SEPARATOR) ||\r\n                this.maskExpression.startsWith(Separators.DOT_SEPARATOR)) &&\r\n            this.dropSpecialCharacters === true\r\n        ) {\r\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\r\n        }\r\n        if (this.maskExpression.startsWith(Separators.COMMA_SEPARATOR) && this.dropSpecialCharacters === true) {\r\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\r\n        }\r\n\r\n        this.formControlResult(result);\r\n\r\n        if (!this.showMaskTyped) {\r\n            if (this.hiddenInput) {\r\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\r\n            }\r\n            return result;\r\n        }\r\n        const resLen: number = result.length;\r\n        const prefNmask: string = this.prefix + this.maskIsShown;\r\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\r\n    }\r\n\r\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\r\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\r\n        if (this._formElement === this.document.activeElement) {\r\n            return;\r\n        }\r\n        this.clearIfNotMatchFn();\r\n    }\r\n\r\n    public hideInput(inputValue: string, maskExpression: string): string {\r\n        return inputValue\r\n            .split('')\r\n            .map((curr: string, index: number) => {\r\n                if (\r\n                    this.maskAvailablePatterns &&\r\n                    this.maskAvailablePatterns[maskExpression[index]] &&\r\n                    this.maskAvailablePatterns[maskExpression[index]].symbol\r\n                ) {\r\n                    return this.maskAvailablePatterns[maskExpression[index]].symbol;\r\n                }\r\n                return curr;\r\n            })\r\n            .join('');\r\n    }\r\n\r\n    // this function is not necessary, it checks result against maskExpression\r\n    public getActualValue(res: string): string {\r\n        const compare: string[] = res\r\n            .split('')\r\n            .filter(\r\n                (symbol: string, i: number) =>\r\n                    this._checkSymbolMask(symbol, this.maskExpression[i]) ||\r\n                    (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\r\n            );\r\n        if (compare.join('') === res) {\r\n            return compare.join('');\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public shiftTypedSymbols(inputValue: string): string {\r\n        let symbolToReplace: string = '';\r\n        const newInputValue: string[] =\r\n            (inputValue &&\r\n                inputValue.split('').map((currSymbol: string, index: number) => {\r\n                    if (\r\n                        this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\r\n                        inputValue[index + 1] !== this.maskExpression[index + 1]\r\n                    ) {\r\n                        symbolToReplace = currSymbol;\r\n                        return inputValue[index + 1];\r\n                    }\r\n                    if (symbolToReplace.length) {\r\n                        const replaceSymbol: string = symbolToReplace;\r\n                        symbolToReplace = '';\r\n                        return replaceSymbol;\r\n                    }\r\n                    return currSymbol;\r\n                })) ||\r\n            [];\r\n        return newInputValue.join('');\r\n    }\r\n\r\n    public showMaskInInput(inputVal?: string): string {\r\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\r\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\r\n                throw new Error('Mask expression must match mask placeholder length');\r\n            } else {\r\n                return this.shownMaskExpression;\r\n            }\r\n        } else if (this.showMaskTyped) {\r\n            if (inputVal) {\r\n                return this._checkForIp(inputVal);\r\n            }\r\n            return this.maskExpression.replace(/\\w/g, '_');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public clearIfNotMatchFn(): void {\r\n        if (\r\n            this.clearIfNotMatch &&\r\n            this.prefix.length + this.maskExpression.length + this.suffix.length !== this._formElement.value.length\r\n        ) {\r\n            this.formElementProperty = ['value', ''];\r\n            this.applyMask(this._formElement.value, this.maskExpression);\r\n        }\r\n    }\r\n\r\n    public set formElementProperty([name, value]: [string, string | boolean]) {\r\n        this._renderer.setProperty(this._formElement, name, value);\r\n    }\r\n\r\n    public checkSpecialCharAmount(mask: string): number {\r\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\r\n        return chars.length;\r\n    }\r\n\r\n    private _checkForIp(inputVal: string): string {\r\n        if (inputVal === '#') {\r\n            return '_._._._';\r\n        }\r\n        const arr: string[] = [];\r\n        for (let i: number = 0; i < inputVal.length; i++) {\r\n            if (inputVal[i].match('\\\\d')) {\r\n                arr.push(inputVal[i]);\r\n            }\r\n        }\r\n        if (arr.length <= 3) {\r\n            return '_._._';\r\n        }\r\n        if (arr.length > 3 && arr.length <= 6) {\r\n            return '_._';\r\n        }\r\n        if (arr.length > 6 && arr.length <= 9) {\r\n            return '_';\r\n        }\r\n        if (arr.length > 9 && arr.length <= 12) {\r\n            return '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private formControlResult(inputValue: string): void {\r\n        if (Array.isArray(this.dropSpecialCharacters)) {\r\n            this.onChange(\r\n                this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)\r\n            );\r\n        } else if (this.dropSpecialCharacters) {\r\n            this.onChange(this._checkSymbols(inputValue));\r\n        } else {\r\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\r\n        }\r\n    }\r\n\r\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\r\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\r\n    }\r\n\r\n    private _removePrefix(value: string): string {\r\n        if (!this.prefix) {\r\n            return value;\r\n        }\r\n        return value ? value.replace(this.prefix, '') : value;\r\n    }\r\n\r\n    private _removeSuffix(value: string): string {\r\n        if (!this.suffix) {\r\n            return value;\r\n        }\r\n        return value ? value.replace(this.suffix, '') : value;\r\n    }\r\n\r\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\r\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\r\n    }\r\n\r\n    private _checkSymbols(result: string): string | number | undefined | null {\r\n        // TODO should simplify this code\r\n        let separatorValue: number | null = this.testFn(Separators.SEPARATOR, this.maskExpression);\r\n        if (separatorValue && this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : result === ','\r\n                ? null\r\n                : this._checkPrecision(\r\n                      this.maskExpression,\r\n                      this._removeMask(\r\n                          this._removeSuffix(this._removePrefix(result)),\r\n                          this.maskSpecialCharacters\r\n                      ).replace(',', '.')\r\n                  );\r\n        }\r\n        separatorValue = this.testFn(Separators.DOT_SEPARATOR, this.maskExpression);\r\n        if (separatorValue && this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : result === ','\r\n                ? null\r\n                : this._checkPrecision(\r\n                      this.maskExpression,\r\n                      this._removeMask(\r\n                          this._removeSuffix(this._removePrefix(result)),\r\n                          this.maskSpecialCharacters\r\n                      ).replace(',', '.')\r\n                  );\r\n        }\r\n        separatorValue = this.testFn(Separators.COMMA_SEPARATOR, this.maskExpression);\r\n        if (separatorValue && this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : result === '.'\r\n                ? null\r\n                : this._checkPrecision(\r\n                      this.maskExpression,\r\n                      this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters)\r\n                  );\r\n        }\r\n        if (this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\r\n        } else if (\r\n            this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(\r\n                ','\r\n            ) !== -1\r\n        ) {\r\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(\r\n                ',',\r\n                '.'\r\n            );\r\n        } else {\r\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\r\n        }\r\n    }\r\n\r\n    // TODO should think about helpers\r\n    private testFn(baseSeparator: string, maskExpretion: string): number | null {\r\n        const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^${baseSeparator}\\\\.([^d]*)`));\r\n        return matcher ? Number(matcher[1]) : null;\r\n    }\r\n\r\n    private _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\r\n        if (separatorExpression.indexOf('2') > 0) {\r\n            return Number(separatorValue).toFixed(2);\r\n        }\r\n        return Number(separatorValue);\r\n    }\r\n}\r\n","import { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\r\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { config, IConfig, withoutValidation } from './config';\r\nimport { MaskService } from './mask.service';\r\nimport { Separators } from './mask-applier.service';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true,\r\n    },\r\n    MaskService,\r\n  ],\r\n})\r\nexport class MaskDirective implements ControlValueAccessor, OnChanges {\r\n  @Input('mask') public maskExpression: string = '';\r\n  @Input() public specialCharacters: IConfig['specialCharacters'] = [];\r\n  @Input() public patterns: IConfig['patterns'] = {};\r\n  @Input() public prefix: IConfig['prefix'] = '';\r\n  @Input() public suffix: IConfig['suffix'] = '';\r\n  @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\r\n  @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\r\n  @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\r\n  @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\r\n  @Input() public showTemplate: IConfig['showTemplate'] | null = null;\r\n  @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\r\n  @Input() public validation: IConfig['validation'] | null = null;\r\n  private _maskValue!: string;\r\n  private _inputValue!: string;\r\n  private _position: number | null = null;\r\n  // tslint:disable-next-line\r\n  private _start!: number;\r\n  private _end!: number;\r\n  private _code!: string;\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => {\r\n  };\r\n  public onTouch = () => {\r\n  };\r\n\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    private _maskService: MaskService,\r\n    @Inject(config) protected _config: IConfig,\r\n  ) {\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    // tslint:disable-next-line:max-line-length\r\n    const {\r\n      maskExpression,\r\n      specialCharacters,\r\n      patterns,\r\n      prefix,\r\n      suffix,\r\n      dropSpecialCharacters,\r\n      hiddenInput,\r\n      showMaskTyped,\r\n      shownMaskExpression,\r\n      showTemplate,\r\n      clearIfNotMatch,\r\n      validation,\r\n    } = changes;\r\n    if (maskExpression) {\r\n      this._maskValue = changes.maskExpression.currentValue || '';\r\n    }\r\n    if (specialCharacters) {\r\n      if (\r\n        !specialCharacters.currentValue ||\r\n        !Array.isArray(specialCharacters.currentValue) ||\r\n        (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)\r\n      ) {\r\n        return;\r\n      }\r\n      this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\r\n    }\r\n    if (patterns) {\r\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\r\n    }\r\n    if (prefix) {\r\n      this._maskService.prefix = prefix.currentValue;\r\n    }\r\n    if (suffix) {\r\n      this._maskService.suffix = suffix.currentValue;\r\n    }\r\n    if (dropSpecialCharacters) {\r\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\r\n    }\r\n    if (hiddenInput) {\r\n      this._maskService.hiddenInput = hiddenInput.currentValue;\r\n    }\r\n    if (showMaskTyped) {\r\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\r\n    }\r\n    if (shownMaskExpression) {\r\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\r\n    }\r\n    if (showTemplate) {\r\n      this._maskService.showTemplate = showTemplate.currentValue;\r\n    }\r\n    if (clearIfNotMatch) {\r\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\r\n    }\r\n    if (validation) {\r\n      this._maskService.validation = validation.currentValue;\r\n    }\r\n    this._applyMask();\r\n  }\r\n\r\n  // tslint:disable-next-line: cyclomatic-complexity\r\n  public validate({ value }: FormControl): ValidationErrors | null {\r\n    if (!this._maskService.validation) {\r\n      return null;\r\n    }\r\n    if (this._maskService.ipError) {\r\n      return { 'Mask error': true };\r\n    }\r\n    if (\r\n      this._maskValue.startsWith('dot_separator') ||\r\n      this._maskValue.startsWith('comma_separator') ||\r\n      this._maskValue.startsWith('separator')\r\n    ) {\r\n      return null;\r\n    }\r\n    if (withoutValidation.includes(this._maskValue)) {\r\n      return null;\r\n    }\r\n    if (this._maskService.clearIfNotMatch) {\r\n      return null;\r\n    }\r\n    if (value && value.toString().length >= 1) {\r\n      let counterOfOpt: number = 0;\r\n      for (const key in this._maskService.maskAvailablePatterns) {\r\n        if (\r\n          this._maskService.maskAvailablePatterns[key].optional &&\r\n          this._maskService.maskAvailablePatterns[key].optional === true\r\n        ) {\r\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\r\n            const opt: string = this._maskValue\r\n              .split('')\r\n              .filter((i: string) => i === key)\r\n              .join('');\r\n            counterOfOpt += opt.length;\r\n          } else if (this._maskValue.indexOf(key) !== -1) {\r\n            counterOfOpt++;\r\n          }\r\n          if (\r\n            this._maskValue.indexOf(key) !== -1 &&\r\n            value.toString().length >= this._maskValue.indexOf(key)\r\n          ) {\r\n            return null;\r\n          }\r\n          if (counterOfOpt === this._maskValue.length) {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (\r\n        this._maskValue.indexOf('*') === 1 ||\r\n        this._maskValue.indexOf('?') === 1 ||\r\n        this._maskValue.indexOf('{') === 1\r\n      ) {\r\n        return null;\r\n      } else if (\r\n        (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\r\n        (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))\r\n      ) {\r\n        return { 'Mask error': true };\r\n      }\r\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\r\n        const length: number = this._maskService.dropSpecialCharacters\r\n          ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\r\n          : this._maskValue.length - counterOfOpt;\r\n        if (value.toString().length < length) {\r\n          return { 'Mask error': true };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  public onInput(e: CustomKeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n    if (!this._maskValue) {\r\n      this.onChange(el.value);\r\n      return;\r\n    }\r\n    const position: number =\r\n      el.selectionStart === 1\r\n        ? (el.selectionStart as number) + this._maskService.prefix.length\r\n        : (el.selectionStart as number);\r\n    let caretShift: number = 0;\r\n    let backspaceShift: boolean = false;\r\n    this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\r\n      caretShift = shift;\r\n      backspaceShift = _backspaceShift;\r\n    });\r\n    // only set the selection if the element is active\r\n    if (this.document.activeElement !== el) {\r\n      return;\r\n    }\r\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\r\n    const positionToApply: number = this._position\r\n      ? this._inputValue.length + position + caretShift\r\n      : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\r\n    el.setSelectionRange(positionToApply, positionToApply);\r\n    if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\r\n      el.setSelectionRange((el.selectionStart as number) + 1, (el.selectionStart as number) + 1);\r\n    }\r\n    this._position = null;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  public onBlur(): void {\r\n    this._maskService.clearIfNotMatchFn();\r\n    this.onTouch();\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    const posStart: number = 0;\r\n    const posEnd: number = 0;\r\n    if (\r\n      el !== null &&\r\n      el.selectionStart !== null &&\r\n      el.selectionStart === el.selectionEnd &&\r\n      el.selectionStart > this._maskService.prefix.length &&\r\n      // tslint:disable-next-line\r\n      (e as any).keyCode !== 38\r\n    ) {\r\n      if (this._maskService.showMaskTyped) {\r\n        // We are showing the mask in the input\r\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\r\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\r\n          // the input ONLY contains the mask, so position the cursor at the start\r\n          el.focus();\r\n          el.setSelectionRange(posStart, posEnd);\r\n        } else {\r\n          // the input contains some characters already\r\n          if (el.selectionStart > this._maskService.actualValue.length) {\r\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\r\n            el.setSelectionRange(\r\n              this._maskService.actualValue.length,\r\n              this._maskService.actualValue.length,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextValue: string | null =\r\n      !el.value || el.value === this._maskService.prefix\r\n        ? this._maskService.prefix + this._maskService.maskIsShown\r\n        : el.value;\r\n\r\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\r\n    if (el.value !== nextValue) {\r\n      el.value = nextValue;\r\n    }\r\n\r\n    /** fix of cursor position with prefix when mouse click occur */\r\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\r\n      el.selectionStart = this._maskService.prefix.length;\r\n      return;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  public a(e: CustomKeyboardEvent): void {\r\n    this._code = e.code ? e.code : e.key;\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n    if (e.keyCode === 38) { // arrow up\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 37 || e.keyCode === 8) { // backspace or left arrow\r\n      // if (e.keyCode === 37) {\r\n      //     el.selectionStart = (el.selectionEnd as number) - 1;\r\n      // }\r\n      if (e.keyCode === 8 && el.value.length === 0) { // backspace\r\n        el.selectionStart = el.selectionEnd;\r\n      }\r\n      if (e.keyCode === 8 && (el.selectionStart as number) !== 0) { // backspace\r\n        let specialChars: string[] = this._config.specialCharacters;\r\n\r\n        // replace dot from special characters in following type of separator\r\n        if ([Separators.IND_COMMA_SEPARATED.toString(), Separators.INT_COMMA_SEPARATED.toString(),\r\n          Separators.INT_SPACE_SEPARATED.toString(), Separators.INT_APOSTROPHE_SEPARATED.toString()]\r\n          .includes(this.maskExpression)) {\r\n          specialChars = specialChars.filter((f: string) => f !== '.');\r\n        }\r\n        this.specialCharacters = specialChars;\r\n        while (\r\n          this.specialCharacters.includes(this._inputValue[(el.selectionStart as number) - 1].toString())\r\n          ) {\r\n          el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\r\n        }\r\n      }\r\n      if (\r\n        (el.selectionStart as number) <= this._maskService.prefix.length &&\r\n        (el.selectionEnd as number) <= this._maskService.prefix.length\r\n      ) {\r\n        e.preventDefault();\r\n      }\r\n      const cursorStart: number | null = el.selectionStart;\r\n      // this.onFocus(e);\r\n      if (\r\n        e.keyCode === 8 &&\r\n        !el.readOnly &&\r\n        cursorStart === 0 &&\r\n        el.selectionEnd === el.value.length &&\r\n        el.value.length !== 0\r\n      ) {\r\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\r\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\r\n      }\r\n    }\r\n    this._maskService.selStart = el.selectionStart;\r\n    this._maskService.selEnd = el.selectionEnd;\r\n  }\r\n\r\n  /** It writes the value in the input */\r\n  public async writeValue(inputValue: string | number): Promise<void> {\r\n    if (inputValue === undefined) {\r\n      inputValue = '';\r\n    }\r\n    if (typeof inputValue === 'number') {\r\n      inputValue = String(inputValue);\r\n      inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\r\n      this._maskService.isNumberValue = true;\r\n    }\r\n    (inputValue && this._maskService.maskExpression) ||\r\n    (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\r\n      ? (this._maskService.formElementProperty = [\r\n        'value',\r\n        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\r\n      ])\r\n      : (this._maskService.formElementProperty = ['value', inputValue]);\r\n    this._inputValue = inputValue;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n    this._maskService.onChange = this.onChange;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  /** It disables the input element */\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this._maskService.formElementProperty = ['disabled', isDisabled];\r\n  }\r\n\r\n  private _repeatPatternSymbols(maskExp: string): string {\r\n    return (\r\n      (maskExp.match(/{[0-9]+}/) &&\r\n        maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\r\n          this._start = currval === '{' ? index : this._start;\r\n\r\n          if (currval !== '}') {\r\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\r\n          }\r\n          this._end = index;\r\n          const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\r\n          const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\r\n          return accum + repaceWith;\r\n        }, '')) ||\r\n      maskExp\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _applyMask(): any {\r\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\r\n    this._maskService.formElementProperty = [\r\n      'value',\r\n      this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\r\n    ];\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { IConfig } from './config';\r\n\r\n@Pipe({\r\n    name: 'mask',\r\n    pure: true,\r\n})\r\nexport class MaskPipe implements PipeTransform {\r\n    public constructor(private _maskService: MaskApplierService) {}\r\n\r\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\r\n        if (!value && typeof value !== 'number') {\r\n            return '';\r\n        }\r\n        if (typeof mask === 'string') {\r\n            return this._maskService.applyMask(`${value}`, mask);\r\n        }\r\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\r\n    }\r\n}\r\n","import { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { MaskDirective } from './mask.directive';\r\nimport { MaskPipe } from './mask.pipe';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n    exports: [MaskDirective, MaskPipe],\r\n    declarations: [MaskDirective, MaskPipe],\r\n})\r\nexport class NgxMaskModule {\r\n    public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaskModule,\r\n            providers: [\r\n                {\r\n                    provide: NEW_CONFIG,\r\n                    useValue: configValue,\r\n                },\r\n                {\r\n                    provide: INITIAL_CONFIG,\r\n                    useValue: initialConfig,\r\n                },\r\n                {\r\n                    provide: config,\r\n                    useFactory: _configFactory,\r\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\r\n                },\r\n                MaskApplierService,\r\n            ],\r\n        };\r\n    }\r\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaskModule,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _configFactory(\r\n    initConfig: optionsConfig,\r\n    configValue: optionsConfig | (() => optionsConfig)\r\n): optionsConfig {\r\n    return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\r\n}\r\n"]}