{"version":3,"file":"ngx-mask.js","sources":["ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts","ng://ngx-mask/ngx-mask.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface IConfig {\r\n    suffix: string;\r\n    prefix: string;\r\n    clearIfNotMatch: boolean;\r\n    showTemplate: boolean;\r\n    showMaskTyped: boolean;\r\n    shownMaskExpression: string;\r\n    dropSpecialCharacters: boolean | string[];\r\n    specialCharacters: string[];\r\n    hiddenInput: boolean | undefined;\r\n    validation: boolean;\r\n    patterns: {\r\n        [character: string]: {\r\n            pattern: RegExp;\r\n            optional?: boolean;\r\n            symbol?: string;\r\n        };\r\n    };\r\n}\r\n\r\nexport type optionsConfig = Partial<IConfig>;\r\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\r\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\r\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\r\n\r\nexport const initialConfig: IConfig = {\r\n    suffix: '',\r\n    prefix: '',\r\n    clearIfNotMatch: false,\r\n    showTemplate: false,\r\n    showMaskTyped: false,\r\n    dropSpecialCharacters: true,\r\n    hiddenInput: undefined,\r\n    shownMaskExpression: '',\r\n    validation: true,\r\n    // tslint:disable-next-line: quotemark\r\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\r\n    patterns: {\r\n        '0': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        '9': {\r\n            pattern: new RegExp('\\\\d'),\r\n            optional: true,\r\n        },\r\n        X: {\r\n            pattern: new RegExp('\\\\d'),\r\n            symbol: '*',\r\n        },\r\n        A: {\r\n            pattern: new RegExp('[a-zA-Z0-9]'),\r\n        },\r\n        S: {\r\n            pattern: new RegExp('[a-zA-Z]'),\r\n        },\r\n        d: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        m: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        M: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        H: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        h: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        s: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n    },\r\n};\r\n\r\nexport const withoutValidation: string[] = [\r\n    'percent',\r\n    'Hh:m0:s0',\r\n    'Hh:m0',\r\n    'Hh',\r\n    'm0:s0',\r\n    's0',\r\n    'm0',\r\n    'separator',\r\n    'dot_separator',\r\n    'comma_separator',\r\n    'd0/M0/0000',\r\n    'd0/M0',\r\n    'd0',\r\n    'M0',\r\n];\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\n\r\nexport enum Separators {\r\n  SEPARATOR = 'separator',\r\n  COMMA_SEPARATOR = 'comma_separator',\r\n  DOT_SEPARATOR = 'dot_separator',\r\n  IND_COMMA_SEPARATED = 'ind_comma_separated',\r\n  INT_COMMA_SEPARATED = 'int_comma_separated',\r\n  INT_SPACE_SEPARATED = 'int_space_separated',\r\n  INT_APOSTROPHE_SEPARATED = 'int_apostrophe_separated'\r\n}\r\n\r\n@Injectable()\r\nexport class MaskApplierService {\r\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\r\n  public hiddenInput: IConfig['hiddenInput'];\r\n  public showTemplate!: IConfig['showTemplate'];\r\n  public clearIfNotMatch!: IConfig['clearIfNotMatch'];\r\n  public maskExpression: string = '';\r\n  public actualValue: string = '';\r\n  public shownMaskExpression: string = '';\r\n  public maskSpecialCharacters!: IConfig['specialCharacters'];\r\n  public maskAvailablePatterns!: IConfig['patterns'];\r\n  public prefix!: IConfig['prefix'];\r\n  public suffix!: IConfig['suffix'];\r\n  public customPattern!: IConfig['patterns'];\r\n  public ipError?: boolean;\r\n  public showMaskTyped!: IConfig['showMaskTyped'];\r\n  public validation: IConfig['validation'];\r\n\r\n  private _shift!: Set<number>;\r\n\r\n  public constructor(@Inject(config) protected _config: IConfig) {\r\n    this._shift = new Set();\r\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this.prefix = this._config.prefix;\r\n    this.suffix = this._config.suffix;\r\n    this.hiddenInput = this._config.hiddenInput;\r\n    this.showMaskTyped = this._config.showMaskTyped;\r\n    this.validation = this._config.validation;\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\r\n    const [mask, customPattern] = maskAndPattern;\r\n    this.customPattern = customPattern;\r\n    return this.applyMask(inputValue, mask);\r\n  }\r\n\r\n  public applyMask(\r\n    inputValue: string,\r\n    maskExpression: string,\r\n    position: number = 0,\r\n    cb: Function = () => {\r\n    },\r\n  ): string {\r\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\r\n      return '';\r\n    }\r\n    let cursor: number = 0;\r\n    let result: string = ``;\r\n    let multi: boolean = false;\r\n    let backspaceShift: boolean = false;\r\n    let shift: number = 1;\r\n    let stepBack: boolean = false;\r\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\r\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\r\n    }\r\n    const inputArray: string[] = inputValue.toString().split('');\r\n    if (maskExpression === 'IP') {\r\n      this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\r\n      maskExpression = '099.099.099.099';\r\n    }\r\n    if (maskExpression.startsWith('percent')) {\r\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\r\n        inputValue = this._checkInput(inputValue);\r\n        const precision: number = this.getPrecision(maskExpression);\r\n        inputValue = this.checkInputPrecision(inputValue, precision, '.');\r\n      }\r\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\r\n        const base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\r\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\r\n      }\r\n      if (this.percentage(inputValue)) {\r\n        result = inputValue;\r\n      } else {\r\n        result = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n    } else if (\r\n      maskExpression.startsWith(Separators.SEPARATOR) ||\r\n      maskExpression.startsWith(Separators.DOT_SEPARATOR) ||\r\n      maskExpression.startsWith(Separators.COMMA_SEPARATOR) ||\r\n      maskExpression.startsWith(Separators.IND_COMMA_SEPARATED) ||\r\n      maskExpression.startsWith(Separators.INT_APOSTROPHE_SEPARATED) ||\r\n      maskExpression.startsWith(Separators.INT_COMMA_SEPARATED) ||\r\n      maskExpression.startsWith(Separators.INT_SPACE_SEPARATED)\r\n    ) {\r\n      if (\r\n        inputValue.match('[wÐ°-ÑÐ-Ð¯]') ||\r\n        inputValue.match('[ÐÑÐ-Ñ]') ||\r\n        inputValue.match('[a-z]|[A-Z]') ||\r\n        inputValue.match(/[-@#!$%\\\\^&*()_Â£Â¬'+|~=`{}\\[\\]:\";<>.?\\/]/)\r\n      ) {\r\n        inputValue = this._checkInput(inputValue);\r\n      }\r\n      const precision: number = this.getPrecision(maskExpression);\r\n      let strForSep: string;\r\n      if (maskExpression.startsWith(Separators.SEPARATOR)) {\r\n        if (\r\n          inputValue.includes(',') &&\r\n          inputValue.endsWith(',') &&\r\n          inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\r\n        ) {\r\n          inputValue = inputValue.substring(0, inputValue.length - 1);\r\n        }\r\n        inputValue = inputValue.replace('.', ' ');\r\n      }\r\n      if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\r\n        if (\r\n          inputValue.indexOf('.') !== -1 &&\r\n          inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\r\n          (inputValue.indexOf('.') > 3 || inputValue.length < 6)\r\n        ) {\r\n          inputValue = inputValue.replace('.', ',');\r\n        }\r\n        inputValue =\r\n          inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\r\n            ? inputValue.slice(1, inputValue.length)\r\n            : inputValue;\r\n      }\r\n      if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\r\n        inputValue =\r\n          inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\r\n            ? inputValue.slice(1, inputValue.length)\r\n            : inputValue;\r\n      }\r\n      if (maskExpression.startsWith(Separators.SEPARATOR)) {\r\n        if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\r\n          inputValue = inputValue.substring(0, inputValue.length - 1);\r\n        }\r\n        inputValue = this.checkInputPrecision(inputValue, precision, ',');\r\n        strForSep = inputValue.replace(/\\s/g, '');\r\n        result = this.separator(strForSep, ' ', ',', precision);\r\n      } else if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\r\n        if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\r\n          inputValue = inputValue.substring(0, inputValue.length - 1);\r\n        }\r\n        inputValue = this.checkInputPrecision(inputValue, precision, ',');\r\n        strForSep = inputValue.replace(/\\./g, '');\r\n        result = this.separator(strForSep, '.', ',', precision);\r\n      } else if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\r\n        strForSep = inputValue.replace(/,/g, '');\r\n        result = this.separator(strForSep, ',', '.', precision);\r\n      } else if (maskExpression.startsWith(Separators.IND_COMMA_SEPARATED)) {\r\n        strForSep = inputValue.replace(/,/g, '');\r\n        result = this.currencySeparator(strForSep, ',', '.', precision, true);\r\n      } else if (maskExpression.startsWith(Separators.INT_SPACE_SEPARATED)) {\r\n        strForSep = inputValue.replace(/[ ,']/g, '');\r\n        result = this.currencySeparator(strForSep, ' ', '.', precision);\r\n      } else if (maskExpression.startsWith(Separators.INT_COMMA_SEPARATED)) {\r\n        strForSep = inputValue.replace(/,/g, '');\r\n        result = this.currencySeparator(strForSep, ',', '.', precision);\r\n      } else if (maskExpression.startsWith(Separators.INT_APOSTROPHE_SEPARATED)) {\r\n        strForSep = inputValue.replace(/[ ,']/g, '');\r\n        result = this.currencySeparator(strForSep, '\\'', '.', precision);\r\n      }\r\n\r\n      const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\r\n      const shiftStep: number = result.length - inputValue.length;\r\n\r\n      // position shifting issue fixed for custom separators\r\n      if (!(maskExpression.startsWith(Separators.IND_COMMA_SEPARATED) ||\r\n        maskExpression.startsWith(Separators.INT_APOSTROPHE_SEPARATED) ||\r\n        maskExpression.startsWith(Separators.INT_COMMA_SEPARATED) ||\r\n        maskExpression.startsWith(Separators.INT_SPACE_SEPARATED))) {\r\n        if (shiftStep > 0 && result[position] !== ',') {\r\n          backspaceShift = true;\r\n          let _shift: number = 0;\r\n          do {\r\n            this._shift.add(position + _shift);\r\n            _shift++;\r\n          } while (_shift < shiftStep);\r\n        } else if (\r\n          (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\r\n          (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\r\n        ) {\r\n          this._shift.clear();\r\n          backspaceShift = true;\r\n          shift = shiftStep;\r\n          position += shiftStep;\r\n          this._shift.add(position);\r\n        } else {\r\n          this._shift.clear();\r\n        }\r\n      }\r\n\r\n    } else {\r\n      for (\r\n        // tslint:disable-next-line\r\n        let i: number = 0, inputSymbol: string = inputArray[0];\r\n        i < inputArray.length;\r\n        i++, inputSymbol = inputArray[i]\r\n      ) {\r\n        if (cursor === maskExpression.length) {\r\n          break;\r\n        }\r\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\r\n          result += inputSymbol;\r\n          cursor += 2;\r\n        } else if (\r\n          maskExpression[cursor + 1] === '*' &&\r\n          multi &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n          multi = false;\r\n        } else if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\r\n          maskExpression[cursor + 1] === '*'\r\n        ) {\r\n          result += inputSymbol;\r\n          multi = true;\r\n        } else if (\r\n          maskExpression[cursor + 1] === '?' &&\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\r\n        ) {\r\n          result += inputSymbol;\r\n          cursor += 3;\r\n        } else if (\r\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\r\n          (this.hiddenInput &&\r\n            this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n            this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\r\n        ) {\r\n          if (maskExpression[cursor] === 'H') {\r\n            if (Number(inputSymbol) > 2) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 'h') {\r\n            if (result === '2' && Number(inputSymbol) > 3) {\r\n              cursor += 1;\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 'm') {\r\n            if (Number(inputSymbol) > 5) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 's') {\r\n            if (Number(inputSymbol) > 5) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor - 1] === 'd') {\r\n            if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31 || inputValue[cursor] === '/') {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n          if (maskExpression[cursor] === 'M') {\r\n            if (\r\n              (inputValue[cursor - 1] === '/' &&\r\n                (Number(inputValue.slice(cursor, cursor + 2)) > 12 ||\r\n                  inputValue[cursor + 1] === '/')) ||\r\n              (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12 ||\r\n                Number(inputValue.slice(0, 2)) > 31 ||\r\n                (Number(inputValue[cursor - 1]) > 1 && inputValue[cursor - 2] === '/'))\r\n            ) {\r\n              cursor += 1;\r\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n                ? inputArray.length\r\n                : cursor;\r\n              this._shift.add(shiftStep + this.prefix.length || 0);\r\n              i--;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          result += inputSymbol;\r\n          cursor++;\r\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\r\n          result += maskExpression[cursor];\r\n          cursor++;\r\n          const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n            ? inputArray.length\r\n            : cursor;\r\n          this._shift.add(shiftStep + this.prefix.length || 0);\r\n          i--;\r\n        } else if (\r\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\r\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\r\n        ) {\r\n          cursor++;\r\n          i--;\r\n        } else if (\r\n          this.maskExpression[cursor + 1] === '*' &&\r\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\r\n          multi\r\n        ) {\r\n          cursor += 3;\r\n          result += inputSymbol;\r\n        } else if (\r\n          this.maskExpression[cursor + 1] === '?' &&\r\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\r\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\r\n          multi\r\n        ) {\r\n          cursor += 3;\r\n          result += inputSymbol;\r\n        } else if (\r\n          this.showMaskTyped &&\r\n          this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\r\n          inputSymbol !== '_'\r\n        ) {\r\n          stepBack = true;\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      result.length + 1 === maskExpression.length &&\r\n      this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\r\n    ) {\r\n      result += maskExpression[maskExpression.length - 1];\r\n    }\r\n\r\n    let newPosition: number = position + 1;\r\n\r\n    while (this._shift.has(newPosition)) {\r\n      shift++;\r\n      newPosition++;\r\n    }\r\n\r\n    let actualShift: number = this._shift.has(position) ? shift : 0;\r\n    if (stepBack) {\r\n      actualShift--;\r\n    }\r\n\r\n    cb(actualShift, backspaceShift);\r\n    if (shift < 0) {\r\n      this._shift.clear();\r\n    }\r\n    let res: string = this.suffix ? `${this.prefix}${result}${this.suffix}` : `${this.prefix}${result}`;\r\n    if (result.length === 0) {\r\n      res = `${this.prefix}${result}`;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  public _findSpecialChar(inputSymbol: string): undefined | string {\r\n    return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\r\n  }\r\n\r\n  protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\r\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\r\n    return (\r\n      this.maskAvailablePatterns[maskSymbol] &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern &&\r\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\r\n    );\r\n  }\r\n\r\n  private separator = (str: string, char: string, decimalChar: string, precision: number) => {\r\n    str += '';\r\n    const x: string[] = str.split(decimalChar);\r\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\r\n    let res: string = x[0];\r\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(res)) {\r\n      res = res.replace(rgx, '$1' + char + '$2');\r\n    }\r\n    if (precision === undefined) {\r\n      return res + decimals;\r\n    } else if (precision === 0) {\r\n      return res;\r\n    }\r\n    return res + decimals.substr(0, precision + 1);\r\n  };\r\n\r\n  private currencySeparator = (str: string, char: string, decimalChar: string, precision: number,\r\n                               indFormat: boolean = false) => {\r\n    str += '';\r\n    const x: string[] = str.split(decimalChar);\r\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\r\n    const baseNum: string = x[0];\r\n    let lastThree: string = baseNum.substring(baseNum.length - 3);\r\n    const otherNumbers: string = baseNum.substring(0, baseNum.length - 3);\r\n    if (otherNumbers !== '') {\r\n      lastThree = char + lastThree;\r\n    }\r\n    const res: string = (indFormat ? otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, char) :\r\n      otherNumbers.replace(/\\B(?=(\\d{3})+(?!\\d))/g, char)) + lastThree;\r\n    if (precision === undefined) {\r\n      return res + decimals;\r\n    } else if (precision === 0) {\r\n      return res;\r\n    }\r\n    return res + decimals.substr(0, precision + 1);\r\n  };\r\n\r\n  private percentage = (str: string): boolean => {\r\n    return Number(str) >= 0 && Number(str) <= 100;\r\n  };\r\n\r\n  private getPrecision = (maskExpression: string): number => {\r\n    const x: string[] = maskExpression.split('.');\r\n    if (x.length > 1) {\r\n      return Number(x[x.length - 1]);\r\n    }\r\n    return Infinity;\r\n  };\r\n\r\n  private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\r\n    if (precision < Infinity) {\r\n      let precisionRegEx: RegExp;\r\n\r\n      if (decimalMarker === '.') {\r\n        precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\r\n      } else {\r\n        precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\r\n      }\r\n\r\n      const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\r\n      if (precisionMatch && precisionMatch[0].length - 1 > precision) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\r\n        inputValue = inputValue.substring(0, inputValue.length - 1);\r\n      }\r\n    }\r\n    return inputValue;\r\n  };\r\n\r\n  private _checkInput(str: string): string {\r\n    return str\r\n      .split('')\r\n      .filter((i: string) => i.match('\\\\d') || i === '.' || i === ',')\r\n      .join('');\r\n  }\r\n\r\n  // tslint:disable-next-line: max-file-line-count\r\n}\r\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { MaskApplierService, Separators } from './mask-applier.service';\r\n\r\n@Injectable()\r\nexport class MaskService extends MaskApplierService {\r\n    public validation: boolean = true;\r\n    public maskExpression: string = '';\r\n    public isNumberValue: boolean = false;\r\n    public showMaskTyped: boolean = false;\r\n    public maskIsShown: string = '';\r\n    public selStart: number | null = null;\r\n    public selEnd: number | null = null;\r\n    protected _formElement: HTMLInputElement;\r\n    // tslint:disable-next-line\r\n    public onChange = (_: any) => {};\r\n\r\n    public constructor(\r\n        // tslint:disable-next-line\r\n        @Inject(DOCUMENT) private document: any,\r\n        @Inject(config) protected _config: IConfig,\r\n        private _elementRef: ElementRef,\r\n        private _renderer: Renderer2\r\n    ) {\r\n        super(_config);\r\n        this._formElement = this._elementRef.nativeElement;\r\n    }\r\n\r\n    // tslint:disable-next-line:cyclomatic-complexity\r\n    public applyMask(\r\n        inputValue: string,\r\n        maskExpression: string,\r\n        position: number = 0,\r\n        cb: Function = () => {}\r\n    ): string {\r\n        if (!maskExpression) {\r\n            return inputValue;\r\n        }\r\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\r\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\r\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\r\n        }\r\n        if (!inputValue && this.showMaskTyped) {\r\n            this.formControlResult(this.prefix);\r\n            return this.prefix + this.maskIsShown;\r\n        }\r\n        const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\r\n        let newInputValue: string = '';\r\n        if (this.hiddenInput !== undefined) {\r\n            let actualResult: string[] = this.actualValue.split('');\r\n            inputValue !== '' && actualResult.length\r\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\r\n                    ? inputValue.length > actualResult.length\r\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\r\n                        : inputValue.length < actualResult.length\r\n                        ? actualResult.length - inputValue.length === 1\r\n                            ? actualResult.splice(this.selStart - 1, 1)\r\n                            : actualResult.splice(this.selStart, this.selEnd - this.selStart)\r\n                        : null\r\n                    : null\r\n                : (actualResult = []);\r\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\r\n        }\r\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\r\n        const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\r\n        this.actualValue = this.getActualValue(result);\r\n\r\n        if (\r\n            (this.maskExpression.startsWith(Separators.SEPARATOR) ||\r\n                this.maskExpression.startsWith(Separators.DOT_SEPARATOR)) &&\r\n            this.dropSpecialCharacters === true\r\n        ) {\r\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\r\n        }\r\n        if (this.maskExpression.startsWith(Separators.COMMA_SEPARATOR) && this.dropSpecialCharacters === true) {\r\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\r\n        }\r\n\r\n        this.formControlResult(result);\r\n\r\n        if (!this.showMaskTyped) {\r\n            if (this.hiddenInput) {\r\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\r\n            }\r\n            return result;\r\n        }\r\n        const resLen: number = result.length;\r\n        const prefNmask: string = this.prefix + this.maskIsShown;\r\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\r\n    }\r\n\r\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\r\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\r\n        if (this._formElement === this.document.activeElement) {\r\n            return;\r\n        }\r\n        this.clearIfNotMatchFn();\r\n    }\r\n\r\n    public hideInput(inputValue: string, maskExpression: string): string {\r\n        return inputValue\r\n            .split('')\r\n            .map((curr: string, index: number) => {\r\n                if (\r\n                    this.maskAvailablePatterns &&\r\n                    this.maskAvailablePatterns[maskExpression[index]] &&\r\n                    this.maskAvailablePatterns[maskExpression[index]].symbol\r\n                ) {\r\n                    return this.maskAvailablePatterns[maskExpression[index]].symbol;\r\n                }\r\n                return curr;\r\n            })\r\n            .join('');\r\n    }\r\n\r\n    // this function is not necessary, it checks result against maskExpression\r\n    public getActualValue(res: string): string {\r\n        const compare: string[] = res\r\n            .split('')\r\n            .filter(\r\n                (symbol: string, i: number) =>\r\n                    this._checkSymbolMask(symbol, this.maskExpression[i]) ||\r\n                    (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\r\n            );\r\n        if (compare.join('') === res) {\r\n            return compare.join('');\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public shiftTypedSymbols(inputValue: string): string {\r\n        let symbolToReplace: string = '';\r\n        const newInputValue: string[] =\r\n            (inputValue &&\r\n                inputValue.split('').map((currSymbol: string, index: number) => {\r\n                    if (\r\n                        this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\r\n                        inputValue[index + 1] !== this.maskExpression[index + 1]\r\n                    ) {\r\n                        symbolToReplace = currSymbol;\r\n                        return inputValue[index + 1];\r\n                    }\r\n                    if (symbolToReplace.length) {\r\n                        const replaceSymbol: string = symbolToReplace;\r\n                        symbolToReplace = '';\r\n                        return replaceSymbol;\r\n                    }\r\n                    return currSymbol;\r\n                })) ||\r\n            [];\r\n        return newInputValue.join('');\r\n    }\r\n\r\n    public showMaskInInput(inputVal?: string): string {\r\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\r\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\r\n                throw new Error('Mask expression must match mask placeholder length');\r\n            } else {\r\n                return this.shownMaskExpression;\r\n            }\r\n        } else if (this.showMaskTyped) {\r\n            if (inputVal) {\r\n                return this._checkForIp(inputVal);\r\n            }\r\n            return this.maskExpression.replace(/\\w/g, '_');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public clearIfNotMatchFn(): void {\r\n        if (\r\n            this.clearIfNotMatch &&\r\n            this.prefix.length + this.maskExpression.length + this.suffix.length !== this._formElement.value.length\r\n        ) {\r\n            this.formElementProperty = ['value', ''];\r\n            this.applyMask(this._formElement.value, this.maskExpression);\r\n        }\r\n    }\r\n\r\n    public set formElementProperty([name, value]: [string, string | boolean]) {\r\n        this._renderer.setProperty(this._formElement, name, value);\r\n    }\r\n\r\n    public checkSpecialCharAmount(mask: string): number {\r\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\r\n        return chars.length;\r\n    }\r\n\r\n    private _checkForIp(inputVal: string): string {\r\n        if (inputVal === '#') {\r\n            return '_._._._';\r\n        }\r\n        const arr: string[] = [];\r\n        for (let i: number = 0; i < inputVal.length; i++) {\r\n            if (inputVal[i].match('\\\\d')) {\r\n                arr.push(inputVal[i]);\r\n            }\r\n        }\r\n        if (arr.length <= 3) {\r\n            return '_._._';\r\n        }\r\n        if (arr.length > 3 && arr.length <= 6) {\r\n            return '_._';\r\n        }\r\n        if (arr.length > 6 && arr.length <= 9) {\r\n            return '_';\r\n        }\r\n        if (arr.length > 9 && arr.length <= 12) {\r\n            return '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private formControlResult(inputValue: string): void {\r\n        if (Array.isArray(this.dropSpecialCharacters)) {\r\n            this.onChange(\r\n                this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)\r\n            );\r\n        } else if (this.dropSpecialCharacters) {\r\n            this.onChange(this._checkSymbols(inputValue));\r\n        } else {\r\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\r\n        }\r\n    }\r\n\r\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\r\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\r\n    }\r\n\r\n    private _removePrefix(value: string): string {\r\n        if (!this.prefix) {\r\n            return value;\r\n        }\r\n        return value ? value.replace(this.prefix, '') : value;\r\n    }\r\n\r\n    private _removeSuffix(value: string): string {\r\n        if (!this.suffix) {\r\n            return value;\r\n        }\r\n        return value ? value.replace(this.suffix, '') : value;\r\n    }\r\n\r\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\r\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\r\n    }\r\n\r\n    private _checkSymbols(result: string): string | number | undefined | null {\r\n        // TODO should simplify this code\r\n        let separatorValue: number | null = this.testFn(Separators.SEPARATOR, this.maskExpression);\r\n        if (separatorValue && this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : result === ','\r\n                ? null\r\n                : this._checkPrecision(\r\n                      this.maskExpression,\r\n                      this._removeMask(\r\n                          this._removeSuffix(this._removePrefix(result)),\r\n                          this.maskSpecialCharacters\r\n                      ).replace(',', '.')\r\n                  );\r\n        }\r\n        separatorValue = this.testFn(Separators.DOT_SEPARATOR, this.maskExpression);\r\n        if (separatorValue && this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : result === ','\r\n                ? null\r\n                : this._checkPrecision(\r\n                      this.maskExpression,\r\n                      this._removeMask(\r\n                          this._removeSuffix(this._removePrefix(result)),\r\n                          this.maskSpecialCharacters\r\n                      ).replace(',', '.')\r\n                  );\r\n        }\r\n        separatorValue = this.testFn(Separators.COMMA_SEPARATOR, this.maskExpression);\r\n        if (separatorValue && this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : result === '.'\r\n                ? null\r\n                : this._checkPrecision(\r\n                      this.maskExpression,\r\n                      this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters)\r\n                  );\r\n        }\r\n        if (this.isNumberValue) {\r\n            return result === ''\r\n                ? result\r\n                : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\r\n        } else if (\r\n            this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(\r\n                ','\r\n            ) !== -1\r\n        ) {\r\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(\r\n                ',',\r\n                '.'\r\n            );\r\n        } else {\r\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\r\n        }\r\n    }\r\n\r\n    // TODO should think about helpers\r\n    private testFn(baseSeparator: string, maskExpretion: string): number | null {\r\n        const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^${baseSeparator}\\\\.([^d]*)`));\r\n        return matcher ? Number(matcher[1]) : null;\r\n    }\r\n\r\n    private _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\r\n        if (separatorExpression.indexOf('2') > 0) {\r\n            return Number(separatorValue).toFixed(2);\r\n        }\r\n        return Number(separatorValue);\r\n    }\r\n}\r\n","import { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\r\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\r\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { config, IConfig, withoutValidation } from './config';\r\nimport { MaskService } from './mask.service';\r\nimport { Separators } from './mask-applier.service';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true,\r\n    },\r\n    MaskService,\r\n  ],\r\n})\r\nexport class MaskDirective implements ControlValueAccessor, OnChanges {\r\n  @Input('mask') public maskExpression: string = '';\r\n  @Input() public specialCharacters: IConfig['specialCharacters'] = [];\r\n  @Input() public patterns: IConfig['patterns'] = {};\r\n  @Input() public prefix: IConfig['prefix'] = '';\r\n  @Input() public suffix: IConfig['suffix'] = '';\r\n  @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\r\n  @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\r\n  @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\r\n  @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\r\n  @Input() public showTemplate: IConfig['showTemplate'] | null = null;\r\n  @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\r\n  @Input() public validation: IConfig['validation'] | null = null;\r\n  private _maskValue!: string;\r\n  private _inputValue!: string;\r\n  private _position: number | null = null;\r\n  // tslint:disable-next-line\r\n  private _start!: number;\r\n  private _end!: number;\r\n  private _code!: string;\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => {\r\n  };\r\n  public onTouch = () => {\r\n  };\r\n\r\n  public constructor(\r\n    // tslint:disable-next-line\r\n    @Inject(DOCUMENT) private document: any,\r\n    private _maskService: MaskService,\r\n    @Inject(config) protected _config: IConfig,\r\n  ) {\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    // tslint:disable-next-line:max-line-length\r\n    const {\r\n      maskExpression,\r\n      specialCharacters,\r\n      patterns,\r\n      prefix,\r\n      suffix,\r\n      dropSpecialCharacters,\r\n      hiddenInput,\r\n      showMaskTyped,\r\n      shownMaskExpression,\r\n      showTemplate,\r\n      clearIfNotMatch,\r\n      validation,\r\n    } = changes;\r\n    if (maskExpression) {\r\n      this._maskValue = changes.maskExpression.currentValue || '';\r\n    }\r\n    if (specialCharacters) {\r\n      if (\r\n        !specialCharacters.currentValue ||\r\n        !Array.isArray(specialCharacters.currentValue) ||\r\n        (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)\r\n      ) {\r\n        return;\r\n      }\r\n      this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\r\n    }\r\n    if (patterns) {\r\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\r\n    }\r\n    if (prefix) {\r\n      this._maskService.prefix = prefix.currentValue;\r\n    }\r\n    if (suffix) {\r\n      this._maskService.suffix = suffix.currentValue;\r\n    }\r\n    if (dropSpecialCharacters) {\r\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\r\n    }\r\n    if (hiddenInput) {\r\n      this._maskService.hiddenInput = hiddenInput.currentValue;\r\n    }\r\n    if (showMaskTyped) {\r\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\r\n    }\r\n    if (shownMaskExpression) {\r\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\r\n    }\r\n    if (showTemplate) {\r\n      this._maskService.showTemplate = showTemplate.currentValue;\r\n    }\r\n    if (clearIfNotMatch) {\r\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\r\n    }\r\n    if (validation) {\r\n      this._maskService.validation = validation.currentValue;\r\n    }\r\n    this._applyMask();\r\n  }\r\n\r\n  // tslint:disable-next-line: cyclomatic-complexity\r\n  public validate({ value }: FormControl): ValidationErrors | null {\r\n    if (!this._maskService.validation) {\r\n      return null;\r\n    }\r\n    if (this._maskService.ipError) {\r\n      return { 'Mask error': true };\r\n    }\r\n    if (\r\n      this._maskValue.startsWith('dot_separator') ||\r\n      this._maskValue.startsWith('comma_separator') ||\r\n      this._maskValue.startsWith('separator')\r\n    ) {\r\n      return null;\r\n    }\r\n    if (withoutValidation.includes(this._maskValue)) {\r\n      return null;\r\n    }\r\n    if (this._maskService.clearIfNotMatch) {\r\n      return null;\r\n    }\r\n    if (value && value.toString().length >= 1) {\r\n      let counterOfOpt: number = 0;\r\n      for (const key in this._maskService.maskAvailablePatterns) {\r\n        if (\r\n          this._maskService.maskAvailablePatterns[key].optional &&\r\n          this._maskService.maskAvailablePatterns[key].optional === true\r\n        ) {\r\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\r\n            const opt: string = this._maskValue\r\n              .split('')\r\n              .filter((i: string) => i === key)\r\n              .join('');\r\n            counterOfOpt += opt.length;\r\n          } else if (this._maskValue.indexOf(key) !== -1) {\r\n            counterOfOpt++;\r\n          }\r\n          if (\r\n            this._maskValue.indexOf(key) !== -1 &&\r\n            value.toString().length >= this._maskValue.indexOf(key)\r\n          ) {\r\n            return null;\r\n          }\r\n          if (counterOfOpt === this._maskValue.length) {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (\r\n        this._maskValue.indexOf('*') === 1 ||\r\n        this._maskValue.indexOf('?') === 1 ||\r\n        this._maskValue.indexOf('{') === 1\r\n      ) {\r\n        return null;\r\n      } else if (\r\n        (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\r\n        (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))\r\n      ) {\r\n        return { 'Mask error': true };\r\n      }\r\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\r\n        const length: number = this._maskService.dropSpecialCharacters\r\n          ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\r\n          : this._maskValue.length - counterOfOpt;\r\n        if (value.toString().length < length) {\r\n          return { 'Mask error': true };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  public onInput(e: CustomKeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n    if (!this._maskValue) {\r\n      this.onChange(el.value);\r\n      return;\r\n    }\r\n    const position: number =\r\n      el.selectionStart === 1\r\n        ? (el.selectionStart as number) + this._maskService.prefix.length\r\n        : (el.selectionStart as number);\r\n    let caretShift: number = 0;\r\n    let backspaceShift: boolean = false;\r\n    this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\r\n      caretShift = shift;\r\n      backspaceShift = _backspaceShift;\r\n    });\r\n    // only set the selection if the element is active\r\n    if (this.document.activeElement !== el) {\r\n      return;\r\n    }\r\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\r\n    const positionToApply: number = this._position\r\n      ? this._inputValue.length + position + caretShift\r\n      : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\r\n    el.setSelectionRange(positionToApply, positionToApply);\r\n    if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\r\n      el.setSelectionRange((el.selectionStart as number) + 1, (el.selectionStart as number) + 1);\r\n    }\r\n    this._position = null;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  public onBlur(): void {\r\n    this._maskService.clearIfNotMatchFn();\r\n    this.onTouch();\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    const posStart: number = 0;\r\n    const posEnd: number = 0;\r\n    if (\r\n      el !== null &&\r\n      el.selectionStart !== null &&\r\n      el.selectionStart === el.selectionEnd &&\r\n      el.selectionStart > this._maskService.prefix.length &&\r\n      // tslint:disable-next-line\r\n      (e as any).keyCode !== 38\r\n    ) {\r\n      if (this._maskService.showMaskTyped) {\r\n        // We are showing the mask in the input\r\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\r\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\r\n          // the input ONLY contains the mask, so position the cursor at the start\r\n          el.focus();\r\n          el.setSelectionRange(posStart, posEnd);\r\n        } else {\r\n          // the input contains some characters already\r\n          if (el.selectionStart > this._maskService.actualValue.length) {\r\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\r\n            el.setSelectionRange(\r\n              this._maskService.actualValue.length,\r\n              this._maskService.actualValue.length,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextValue: string | null =\r\n      !el.value || el.value === this._maskService.prefix\r\n        ? this._maskService.prefix + this._maskService.maskIsShown\r\n        : el.value;\r\n\r\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\r\n    if (el.value !== nextValue) {\r\n      el.value = nextValue;\r\n    }\r\n\r\n    /** fix of cursor position with prefix when mouse click occur */\r\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\r\n      el.selectionStart = this._maskService.prefix.length;\r\n      return;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  public a(e: CustomKeyboardEvent): void {\r\n    this._code = e.code ? e.code : e.key;\r\n    const el: HTMLInputElement = e.target as HTMLInputElement;\r\n    this._inputValue = el.value;\r\n    if (e.keyCode === 38) { // arrow up\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 37 || e.keyCode === 8) { // backspace or left arrow\r\n      // if (e.keyCode === 37) {\r\n      //     el.selectionStart = (el.selectionEnd as number) - 1;\r\n      // }\r\n      if (e.keyCode === 8 && el.value.length === 0) { // backspace\r\n        el.selectionStart = el.selectionEnd;\r\n      }\r\n      if (e.keyCode === 8 && (el.selectionStart as number) !== 0) { // backspace\r\n        let specialChars: string[] = this._config.specialCharacters;\r\n\r\n        // replace dot from special characters in following type of separator\r\n        if ([Separators.IND_COMMA_SEPARATED.toString(), Separators.INT_COMMA_SEPARATED.toString(),\r\n          Separators.INT_SPACE_SEPARATED.toString(), Separators.INT_APOSTROPHE_SEPARATED.toString()]\r\n          .includes(this.maskExpression)) {\r\n          specialChars = specialChars.filter((f: string) => f !== '.');\r\n        }\r\n        this.specialCharacters = specialChars;\r\n        while (\r\n          this.specialCharacters.includes(this._inputValue[(el.selectionStart as number) - 1].toString())\r\n          ) {\r\n          el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\r\n        }\r\n      }\r\n      if (\r\n        (el.selectionStart as number) <= this._maskService.prefix.length &&\r\n        (el.selectionEnd as number) <= this._maskService.prefix.length\r\n      ) {\r\n        e.preventDefault();\r\n      }\r\n      const cursorStart: number | null = el.selectionStart;\r\n      // this.onFocus(e);\r\n      if (\r\n        e.keyCode === 8 &&\r\n        !el.readOnly &&\r\n        cursorStart === 0 &&\r\n        el.selectionEnd === el.value.length &&\r\n        el.value.length !== 0\r\n      ) {\r\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\r\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\r\n      }\r\n    }\r\n    this._maskService.selStart = el.selectionStart;\r\n    this._maskService.selEnd = el.selectionEnd;\r\n  }\r\n\r\n  /** It writes the value in the input */\r\n  public async writeValue(inputValue: string | number): Promise<void> {\r\n    if (inputValue === undefined) {\r\n      inputValue = '';\r\n    }\r\n    if (typeof inputValue === 'number') {\r\n      inputValue = String(inputValue);\r\n      inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\r\n      this._maskService.isNumberValue = true;\r\n    }\r\n    (inputValue && this._maskService.maskExpression) ||\r\n    (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\r\n      ? (this._maskService.formElementProperty = [\r\n        'value',\r\n        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\r\n      ])\r\n      : (this._maskService.formElementProperty = ['value', inputValue]);\r\n    this._inputValue = inputValue;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n    this._maskService.onChange = this.onChange;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  /** It disables the input element */\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this._maskService.formElementProperty = ['disabled', isDisabled];\r\n  }\r\n\r\n  private _repeatPatternSymbols(maskExp: string): string {\r\n    return (\r\n      (maskExp.match(/{[0-9]+}/) &&\r\n        maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\r\n          this._start = currval === '{' ? index : this._start;\r\n\r\n          if (currval !== '}') {\r\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\r\n          }\r\n          this._end = index;\r\n          const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\r\n          const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\r\n          return accum + repaceWith;\r\n        }, '')) ||\r\n      maskExp\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _applyMask(): any {\r\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\r\n    this._maskService.formElementProperty = [\r\n      'value',\r\n      this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\r\n    ];\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { IConfig } from './config';\r\n\r\n@Pipe({\r\n    name: 'mask',\r\n    pure: true,\r\n})\r\nexport class MaskPipe implements PipeTransform {\r\n    public constructor(private _maskService: MaskApplierService) {}\r\n\r\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\r\n        if (!value && typeof value !== 'number') {\r\n            return '';\r\n        }\r\n        if (typeof mask === 'string') {\r\n            return this._maskService.applyMask(`${value}`, mask);\r\n        }\r\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\r\n    }\r\n}\r\n","import { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\r\nimport { MaskApplierService } from './mask-applier.service';\r\nimport { MaskDirective } from './mask.directive';\r\nimport { MaskPipe } from './mask.pipe';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n    exports: [MaskDirective, MaskPipe],\r\n    declarations: [MaskDirective, MaskPipe],\r\n})\r\nexport class NgxMaskModule {\r\n    public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaskModule,\r\n            providers: [\r\n                {\r\n                    provide: NEW_CONFIG,\r\n                    useValue: configValue,\r\n                },\r\n                {\r\n                    provide: INITIAL_CONFIG,\r\n                    useValue: initialConfig,\r\n                },\r\n                {\r\n                    provide: config,\r\n                    useFactory: _configFactory,\r\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\r\n                },\r\n                MaskApplierService,\r\n            ],\r\n        };\r\n    }\r\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaskModule,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _configFactory(\r\n    initConfig: optionsConfig,\r\n    configValue: optionsConfig | (() => optionsConfig)\r\n): optionsConfig {\r\n    return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {MaskApplierService as Éµa} from './app/ngx-mask/mask-applier.service';"],"names":["tslib_1.__param","tslib_1.__decorate"],"mappings":"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"}